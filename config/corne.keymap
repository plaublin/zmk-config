/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer /* 0 */ {
						 display-name = "Focal";
// -----------------------------------------------------------------------------------------
// | NONE |  V  |  L  |  H  |  G  |  K  |   |  Q  |  F   |  O  |  U  |  J  | NONE |
// | NONE |  S  |  R  |  N  |  T  |  B  |   |  Y  |  C   |  A  |  E  |  I  | NONE |
// | NONE |  W  |  X  |  M  |  D  |  Z  |   |  '  |  P   |  ,  |  ;  |  .  | NONE |
//                    |NONE | SYM | SPC |   | ENT | NUM  |NONE |
                        bindings = <
   &none &kp V &kp L &kp H &kp G     &kp K                &kp Q          &kp F      &kp O     &kp U	   &kp J   &none
   &none &kp S &kp R &kp N &kp T     &kp B                &kp Y          &kp C      &kp A     &kp E    &kp I   &none
   &none &kp W &kp X &kp M &kp D     &kp Z                &kp QUOT       &kp P      &kp COMMA &kp SEMI &kp DOT &none
                     &none &lt 2 ESC &mt LSHIFT SPACE     &mt LSHIFT RET &lt 3 BSPC &none
                        >;
                };

					 qwerty_layer /* 1 */ {
						 display-name = "Qwerty";
// -----------------------------------------------------------------------------------------
// | NONE |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | NONE |
// | NONE |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | NONE |
// | NONE |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  '  | NONE |
//                    |NONE | SYM | SPC |   | ENT | NUM  |NONE |
                        bindings = <
   &none &kp Q &kp W &kp E &kp R     &kp T                &kp Y          &kp U      &kp I     &kp O	  &kp P    &none
   &none &kp A &kp S &kp D &kp F     &kp G                &kp H          &kp J      &kp K     &kp L   &kp SEMI &none
   &none &kp Z &kp X &kp C &kp V     &kp B                &kp N          &kp M      &kp COMMA &kp DOT &kp QUOT &none
                     &none &lt 2 ESC &mt LSHIFT SPACE     &mt LSHIFT RET &lt 3 BSPC &none
                        >;
                };

					 symbols_layer /* 2 */ {
						 display-name = "Symbols";
//	Top row contains everything for the French accentued letters:
//		" then press a letter for the 2 dots accent (ï, ü, ë)
//		^ then press a letter for the circonflexe accent (ê, ô, â, î, û)
//		ç
//		é
//		` then press a letter for the grave accent (è, à, ù)
//	Frequence order: é ` ç ^ "
// -----------------------------------------------------------------------------------------
// | NONE |  "  |  ^  |  ç  |  é  |  `  |   |  ~  |  {   |  }  |  &  |  <  | NONE |
// | NONE |  ^  |  !  |  @  |  #  |  %  |   |  °  |  (   |  )  |  /  |  $  | NONE |
// | NONE | GUI | ALT | CTL | TAB | MSE |   | ___ |  [   |  ]  |  \  |  >  | NONE |
//                    |NONE | SYM | SPC |   | ENT | NUM  |NONE |
                        bindings = <
   &none &kp RA(DQT) &kp RA(CARET) &kp RA(COMMA) &kp RA(E) &kp RA(GRAVE)     &kp RS(RA(GRAVE)) &kp LBRC &kp RBRC &kp AMPS  &kp LT   &none
   &none &kp CARET   &kp EXCL      &kp AT        &kp HASH  &kp PRCNT         &kp RS(RA(0))     &kp LPAR &kp RPAR &kp SLASH &kp DLLR &none
   &none &sk LGUI    &sk LALT      &sk LCTL      &kp TAB   &tog 4            &none             &kp LBKT &kp RBKT &kp BSLH  &kp GT   &none
                                   &trans        &trans    &trans            &trans            &trans   &trans
                        >;
                };

					 numbers_layer /* 3 */ {
						 display-name = "Numbers";
// -----------------------------------------------------------------------------------------
// | NONE | INS |HOME | UP  | END | DEL |   |  /  |  7   |  8  |  9  |  *  | NONE |
// | NONE |GESC |LEFT | DN  |RGHT |PGUP |   |  0  |  1   |  2  |  3  |  -  | NONE |
// | NONE | GUI | ALT | CTL | TAB |PGDN |   |  =  |  4   |  5  |  6  |  .  | NONE |
//                    |NONE | SYM | SPC |   | ENT | NUM  |NONE |
                        bindings = <
   &none &kp INS  &kp HOME &kp UP   &kp END   &kp DEL       &kp SLASH &kp 7  &kp 8 &kp 9 &kp STAR  &none
   &none &kp A    &kp LEFT &kp DOWN &kp RIGHT &kp PG_UP     &kp 0     &kp 1  &kp 2 &kp 3 &kp MINUS &none
   &none &sk LGUI &sk LALT &sk LCTL &kp TAB   &kp PG_DN     &kp EQUAL &kp 4  &kp 5 &kp 6 &kp DOT   &none
                           &trans   &trans    &trans        &trans    &trans &trans
                        >;
                };

					 mouse_layer /* 4 */ {
						 display-name = "Mouse";
// -----------------------------------------------------------------------------------------
// | NONE | NONE |BTN3 |WHUP |GESC | NONE |   | BTN3 | BTN1 | MSUP | BTN2 | NONE | NONE |
// | NONE | NONE |BTN1 |WHDN |BTN2 | NONE |   | NONE | MSLF | MSDN | MSRG | NONE | NONE |
// | NONE | GUI  | ALT | CTL | TAB |  TGL |   | NONE | NONE | RCTL | RALT | RGUI | NONE |
//                     |NONE | SYM | SPC  |   | ENT  | NUM  | NONE |
                        bindings = <
   &none &none    &mskp MB3 &msc SCRL_UP   &gresc    &none      &mskp MB3 &mskp MB1      &mmv MOVE_UP   &mskp MB2       &none    &none
   &none &none    &mskp MB1 &msc SCRL_DOWN &mskp MB2 &none      &none     &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none    &none
   &none &kp LGUI &kp LALT  &kp LCTL       &kp TAB   &tog 4     &none     &none          &kp RCTL       &kp RALT        &kp RGUI &none
                            &trans         &trans    &trans     &trans    &trans         &trans
                        >;
                };

					 function_layer /* 5 */ {
						 display-name = "Functions";
// -----------------------------------------------------------------------------------------
// | NONE |  DEL | F1  | F2  | F3  | F4  |   | MPLY | VOLU | FOCAL|QWERTY| NONE | NONE |
// | NONE |  ESC | F5  | F6  | F7  | F8  |   | MPST | VOLD | NONE | NONE | NONE | NONE |
// | NONE | PSCR | F9  | F10 | F11 | F12 |   | NONE | MUTE | BTNX | BTPR | BTCL | NONE |
//                     |NONE | SYM | SPC |   | ENT  | NUM  | NONE |
                        bindings = <
   &none &kp DEL   &kp F1 &kp F2  &kp F3  &kp F4      &kp K_PP &kp K_VOL_UP &to 0      &to 1      &none      &none
   &none &kp ESC   &kp F5 &kp F6  &kp F7  &kp F8      &kp K_PP &kp K_VOL_DN &none      &none      &none      &none
   &none &kp PSCRN &kp F9 &kp F10 &kp F11 &kp F12     &none    &kp K_MUTE   &bt BT_PRV &bt BT_NXT &bt BT_CLR &none
                          &trans  &trans  &trans      &trans   &trans       &trans
                        >;
                };
        };

		  conditional_layers {
			  compatible = "zmk,conditional-layers";
			  tri_layer {
				  if-layers = <2 3>;
				  then-layer = <5>;
			  };
		  };

		  behaviors {
			  bspc_del: backspace_delete {
				  compatible = "zmk,behavior-mod-morph";
				  #binding-cells = <0>;
				  bindings = <&kp BSPC>, <&kp DEL>;
				  mods = <(MOD_LSFT|MOD_RSFT)>;
			  };

		  };
};

